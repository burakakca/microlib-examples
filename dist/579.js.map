{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","getServerAddress","dns","result","console","debug","address","error","ws","serverAddress","then","publishEvent","event","observer","serializedEvent","JSON","stringify","webswitch","WebSocket","on","message","parse","eventName","notify","warn","name","send","readyState","setTimeout","e"],"mappings":"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","file":"579.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\";\n\nimport WebSocket from \"ws\";\nimport dns from \"dns/promises\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.dev\";\nconst PORT = 8062;\nconst PATH = \"/webswitch/broadcast\";\n\n/**\n * Lookup IP address of WebSwitch server.\n */\nasync function getServerAddress() {\n  try {\n    const result = await dns.lookup(FQDN);\n    console.debug(\"server address\", result);\n    return result?.address ? result.address : \"localhost\";\n  } catch (error) {\n    console.error(\"dns lookup\", error);\n  }\n  return \"localhost\";\n}\n\n/**@type import(\"ws/lib/websocket\") */\nlet ws;\nconst serverAddress = getServerAddress().then(result => result.address);\n\nexport async function publishEvent(event, observer) {\n  if (!event) return;\n\n  serverAddress\n    .then(function (address) {\n      const serializedEvent = JSON.stringify(event);\n\n      function webswitch() {\n        console.debug(\"webswitch sending\", event);\n\n        if (!ws) {\n          ws = new WebSocket(`ws://${address}:${PORT}${PATH}`);\n\n          ws.on(\"message\", function (message) {\n            try {\n              const event = JSON.parse(message);\n              if (event.eventName && observer) {\n                observer.notify(event.eventName, event);\n              } else {\n                console.warn(\"no eventName or observer\", message);\n              }\n            } catch (error) {\n              console.error(ws.on.name, message, error);\n            }\n          });\n\n          ws.on(\"open\", function () {\n            ws.send(JSON.stringify(\"webswitch\"));\n          });\n\n          ws.on(\"error\", function (error) {\n            console.error(ws.on.name, error);\n          });\n        }\n\n        function send() {\n          if (ws.readyState) {\n            ws.send(serializedEvent);\n          } else {\n            setTimeout(() => send(), 1000);\n          }\n        }\n\n        send();\n      }\n\n      try {\n        webswitch();\n      } catch (e) {\n        console.warn(publishEvent.name, e.message);\n      }\n    })\n    .catch(e => console.error(e));\n}\n"],"sourceRoot":""}