{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","getHostName","dns","console","warn","httpClient","hostname","port","path","method","payload","Promise","resolve","reject","contentLength","includes","Buffer","byteLength","contentHeaders","headers","options","req","http","res","setEncoding","on","chunk","log","e","write","webswitchConnect","client","url","observer","debug","connection","remoteAddress","message","type","event","JSON","parse","notify","eventName","address","error","connect","webswitchConnection","publishEvent","useWebswitch","serializedEvent","stringify","connected","websocket","sendUTF","serialziedEvent"],"mappings":"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","file":"src_services_webswitch_js.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\";\n\nimport http from \"http\";\nimport websocket from \"websocket\";\nimport dns from \"dns/promises\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.dev\";\nconst PORT = 8060;\nconst PATH = \"/api/publish\";\n\nasync function getHostName() {\n  try {\n    return (await dns.lookup(FQDN)) ? FQDN : \"localhost\";\n  } catch (error) {\n    console.warn(\"dns lookup\", error);\n  }\n  return \"localhost\";\n}\n\nasync function httpClient({\n  hostname,\n  port,\n  path,\n  method = \"GET\",\n  payload = \"\",\n}) {\n  return new Promise(function (resolve, reject) {\n    const contentLength = [\"POST\", \"PATCH\"].includes(method)\n      ? Buffer.byteLength(payload)\n      : 0;\n    const contentHeaders = { \"Content-Type\": \"application/json\" };\n    const headers =\n      contentLength > 0\n        ? { ...contentHeaders, \"Content-Length\": contentLength }\n        : contentHeaders;\n\n    const options = {\n      hostname,\n      port,\n      path,\n      method,\n      headers,\n    };\n\n    const req = http.request(options, res => {\n      res.setEncoding(\"utf8\");\n      res.on(\"data\", chunk => {\n        console.log(chunk);\n      });\n      res.on(\"end\", () => {});\n    });\n\n    req.on(\"error\", e => {\n      reject(e);\n    });\n\n    req.on(\"finish\", resolve);\n\n    // Write data to request body\n    if (contentLength > 0) req.write(payload);\n  });\n}\n\n/**\n * Connect to Webswitch server.\n * @returns {Promise<websocket.connection>}\n */\nasync function webswitchConnect(client, url, observer) {\n  return new Promise(function (resolve, reject) {\n    console.debug(\"connecting to...\", url);\n\n    client.on(\"connect\", function (connection) {\n      console.debug(\"...connected to\", url, connection.remoteAddress);\n\n      connection.on(\"message\", function (message) {\n        console.debug(\"received message from\", url);\n\n        if (message.type === \"utf8\") {\n          const event = JSON.parse(message);\n\n          observer.notify(event.eventName, {\n            message,\n            address: connection.remoteAddress,\n          });\n        }\n      });\n\n      resolve(connection);\n    });\n\n    client.on(\"connectFailed\", function (error) {\n      reject(error);\n    });\n\n    client.connect(url);\n  });\n}\nlet webswitchConnection;\n\nexport async function publishEvent(event, observer, useWebswitch = true) {\n  if (!event) return;\n\n  const hostname = await getHostName();\n  const serializedEvent = JSON.stringify(event);\n\n  if (useWebswitch) {\n    if (!(webswitchConnection && webswitchConnection.connected)) {\n      // login\n      await httpClient({\n        hostname,\n        port: PORT,\n        path: \"/login\",\n        method: \"POST\",\n      });\n\n      webswitchConnection = await webswitchConnect(\n        new websocket.client(),\n        `ws://${hostname}:${PORT}${PATH}`,\n        observer\n      );\n    }\n    webswitchConnection.sendUTF(serializedEvent);\n  } else {\n    httpClient({\n      hostname,\n      port,\n      path,\n      method: \"POST\",\n      payload: serialziedEvent,\n    });\n  }\n}\n"],"sourceRoot":""}