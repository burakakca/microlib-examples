{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","getHostName","dns","console","warn","httpClient","hostname","port","path","method","payload","options","headers","Buffer","byteLength","req","http","res","setEncoding","on","chunk","log","e","write","end","webswitchConnect","client","url","observer","Promise","resolve","reject","debug","connection","remoteAddress","message","type","event","JSON","parse","notify","eventName","address","error","connect","publishEvent","useWebswitch","serializedEvent","stringify","webswitchConnection","connected","websocket","host","sendUTF","serialziedEvent"],"mappings":"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","file":"src_services_webswitch_js.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\";\n\nimport http from \"http\";\nimport websocket from \"websocket\";\nimport dns from \"dns/promises\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.dev\";\nconst PORT = 8060;\nconst PATH = \"/api/publish\";\n\nasync function getHostName() {\n  try {\n    return (await dns.lookup(FQDN)) ? FQDN : \"localhost\";\n  } catch (error) {\n    console.warn(\"dns lookup\", error);\n  }\n  return \"localhost\";\n}\n\nasync function httpClient({ hostname, port, path, method, payload = \"\" }) {\n  const options = {\n    hostname,\n    port,\n    path,\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Content-Length\": Buffer.byteLength(payload),\n    },\n  };\n\n  const req = http.request(options, res => {\n    res.setEncoding(\"utf8\");\n    res.on(\"data\", chunk => {\n      console.log(chunk);\n    });\n    res.on(\"end\", () => {});\n  });\n\n  req.on(\"error\", e => {\n    // console.error(`problem with request: ${e.message}`);\n  });\n\n  // Write data to request body\n  req.write(payload);\n  req.end();\n}\n\n/**\n * Connect to Webswitch server.\n * @returns {Promise<websocket.connection>}\n */\nasync function webswitchConnect(client, url, observer) {\n  return new Promise(function (resolve, reject) {\n    console.debug(\"connecting to...\", url);\n\n    client.on(\"connect\", function (connection) {\n      console.debug(\"...connected to\", url, connection.remoteAddress);\n\n      connection.on(\"message\", function (message) {\n        console.debug(\"received message from\", url);\n\n        if (message.type === \"utf8\") {\n          const event = JSON.parse(message);\n\n          observer.notify(event.eventName, {\n            message,\n            address: connection.remoteAddress,\n          });\n        }\n      });\n\n      resolve(connection);\n    });\n\n    client.on(\"connectFailed\", function (error) {\n      reject(error);\n    });\n\n    client.connect(url);\n  });\n}\n\nexport async function publishEvent(event, observer, useWebswitch = true) {\n  if (!event) return;\n\n  const hostname = await getHostName();\n  const serializedEvent = JSON.stringify(event);\n  let webswitchConnection;\n\n  if (useWebswitch) {\n    if (!webswitchConnection || !webswitchConnection.connected) {\n      httpClient({ hostname, PORT, path: \"/login\", method: \"POST\" });\n      \n      webswitchConnection = await webswitchConnect(\n        new websocket.client(),\n        `ws://${host}:${PORT}${PATH}`,\n        observer\n      );\n    }\n    webswitchConnection.sendUTF(serializedEvent);\n  } else {\n    httpClient({\n      hostname,\n      port,\n      path,\n      method: \"POST\",\n      payload: serialziedEvent,\n    });\n  }\n}\n"],"sourceRoot":""}