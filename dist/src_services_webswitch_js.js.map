{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","getHostName","dns","console","warn","ws","publishEvent","event","observer","webswitch","debug","WebSocket","hostname","on","message","JSON","parse","notify","eventName","send","serializedEvent","error","stringify","e","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACa;;;;;;AAEb;AACA;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8B,oBAA3C;AACA,IAAMC,IAAI,GAAG,IAAb;AACA,IAAMC,IAAI,GAAG,sBAAb;;SAEeC,W;;;AASf;;;;yEATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEkBC,0DAAA,CAAWP,IAAX,CAFlB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,0BAEsCA,IAFtC;AAAA;AAAA;;AAAA;AAAA,0BAE6C,WAF7C;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIIQ,mBAAO,CAACC,IAAR,CAAa,YAAb;;AAJJ;AAAA,6CAMS,WANT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUA,IAAIC,EAAJ;AAEO,SAAeC,YAAtB;AAAA;AAAA;;;0EAAO,kBAA4BC,KAA5B,EAAmCC,QAAnC;AAAA,mCAMIC,SANJ;AAAA;AAAA;AAAA;AAAA;AAMIA,qBANJ,yBAMgB;AACnBN,qBAAO,CAACO,KAAR,CAAc,mBAAd,EAAmCH,KAAnC;;AAEA,kBAAI,CAACF,EAAL,EAAS;AACPA,kBAAE,GAAG,IAAIM,2CAAJ,gBAAsBC,QAAtB,cAAkCb,IAAlC,SAAyCC,IAAzC,EAAL;AAEAK,kBAAE,CAACQ,EAAH,CAAM,SAAN,EAAiB,UAAUC,OAAV,EAAmB;AAClCX,yBAAO,CAACO,KAAR,CAAcI,OAAd;AACA,sBAAMP,KAAK,GAAGQ,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAd;AACAX,yBAAO,CAACO,KAAR,CAAcH,KAAd;AACAC,0BAAQ,CAACS,MAAT,CAAgBV,KAAK,CAACW,SAAtB,EAAiCX,KAAjC;AACD,iBALD;AAOAF,kBAAE,CAACQ,EAAH,CAAM,MAAN,EAAc,YAAY;AACxBR,oBAAE,CAACc,IAAH,CAAQC,eAAR;AACD,iBAFD;AAIAf,kBAAE,CAACQ,EAAH,CAAM,OAAN,EAAe,UAAUQ,KAAV,EAAiB;AAC9BlB,yBAAO,CAACkB,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACD,iBAFD;AAGA;AACD;;AACDhB,gBAAE,CAACc,IAAH,CAAQC,eAAR;AACD,aA7BI;;AAAA,gBACAb,KADA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGkBN,WAAW,EAH7B;;AAAA;AAGCW,oBAHD;AAICQ,2BAJD,GAImBL,IAAI,CAACO,SAAL,CAAef,KAAf,CAJnB;;AA+BL,gBAAI;AACFE,uBAAS;AACV,aAFD,CAEE,OAAOc,CAAP,EAAU;AACVpB,qBAAO,CAACC,IAAR,CAAaE,YAAY,CAACkB,IAA1B,EAAgCD,CAAC,CAACT,OAAlC;AACD;;AAnCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"src_services_webswitch_js.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\";\n\nimport WebSocket from \"ws\";\nimport dns from \"dns/promises\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.io\";\nconst PORT = 8062;\nconst PATH = \"/webswitch/broadcast\";\n\nasync function getHostName() {\n  try {\n    return (await dns.lookup(FQDN)) ? FQDN : \"localhost\";\n  } catch (error) {\n    console.warn(\"dns lookup\", error);\n  }\n  return \"localhost\";\n}\n\n/**@type import(\"ws/lib/websocket\") */\nlet ws;\n\nexport async function publishEvent(event, observer) {\n  if (!event) return;\n\n  const hostname = await getHostName();\n  const serializedEvent = JSON.stringify(event);\n\n  function webswitch() {\n    console.debug(\"webswitch sending\", event);\n\n    if (!ws) {\n      ws = new WebSocket(`ws://${hostname}:${PORT}${PATH}`);\n\n      ws.on(\"message\", function (message) {\n        console.debug(message);\n        const event = JSON.parse(message);\n        console.debug(event);\n        observer.notify(event.eventName, event);\n      });\n\n      ws.on(\"open\", function () {\n        ws.send(serializedEvent);\n      });\n\n      ws.on(\"error\", function (error) {\n        console.error(\"webswitchClient.on(error)\", error);\n      });\n      return;\n    }\n    ws.send(serializedEvent);\n  }\n\n  try {\n    webswitch();\n  } catch (e) {\n    console.warn(publishEvent.name, e.message);\n  }\n}\n"],"sourceRoot":""}