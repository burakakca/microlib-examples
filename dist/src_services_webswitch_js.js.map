{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","getHostName","dns","console","warn","httpClient","hostname","port","path","method","payload","Promise","resolve","reject","contentLength","includes","Buffer","byteLength","contentHeaders","headers","options","req","http","res","setEncoding","on","chunk","log","e","name","message","write","webswitchConnect","client","url","observer","debug","connection","remoteAddress","error","connect","webswitchConnection","publishEvent","event","useWebswitch","serializedEvent","JSON","stringify","connected","websocket","type","parse","notify","eventName","address","sendUTF","serialziedEvent"],"mappings":"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","file":"src_services_webswitch_js.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\";\n\nimport http from \"http\";\nimport websocket from \"websocket\";\nimport dns from \"dns/promises\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.dev\";\nconst PORT = 8060;\nconst PATH = \"/api/publish\";\n\nasync function getHostName() {\n  try {\n    return (await dns.lookup(FQDN)) ? FQDN : \"localhost\";\n  } catch (error) {\n    console.warn(\"dns lookup\", error);\n  }\n  return \"localhost\";\n}\n\nasync function httpClient({\n  hostname,\n  port,\n  path,\n  method = \"GET\",\n  payload = \"\",\n}) {\n  return new Promise(function (resolve, reject) {\n    const contentLength = [\"POST\", \"PATCH\"].includes(method)\n      ? Buffer.byteLength(payload)\n      : 0;\n    const contentHeaders = { \"Content-Type\": \"application/json\" };\n    const headers =\n      contentLength > 0\n        ? { ...contentHeaders, \"Content-Length\": contentLength }\n        : contentHeaders;\n\n    const options = {\n      hostname,\n      port,\n      path,\n      method,\n      headers,\n    };\n\n    try {\n      const req = http.request(options, res => {\n        res.setEncoding(\"utf8\");\n        res.on(\"data\", chunk => console.log(chunk));\n        res.on(\"error\", e => console.warn(httpClient.name, e.message));\n        res.on(\"end\", resolve);\n      });\n      req.on(\"error\", e => {\n        reject(e);\n      });\n      if (contentLength > 0) req.on(\"connect\", () => req.write(payload));\n    } catch (e) {\n      console.warn(httpClient.name, e.message);\n    }\n  });\n}\n\n/**\n * Connect to Webswitch server.\n * @param {websocket.client} client\n * @returns {Promise<websocket.connection>}\n */\nasync function webswitchConnect(client, url, observer) {\n  return new Promise(function (resolve, reject) {\n    try {\n      console.debug(\"connecting to...\", url);\n\n      client.on(\"connect\", function (connection) {\n        console.debug(\"...connected to\", url, connection.remoteAddress);\n        resolve(connection);\n      });\n\n      client.on(\"connectFailed\", function (error) {\n        reject(error);\n      });\n      client.on(\"error\", function (error) {\n        reject(error);\n      });\n      client.connect(url);\n    } catch (e) {\n      console.warn(webswitchConnect.name, e.message);\n    }\n  });\n}\nlet webswitchConnection;\n\nexport async function publishEvent(event, observer, useWebswitch = true) {\n  if (!event) return;\n\n  const hostname = await getHostName();\n  const serializedEvent = JSON.stringify(event);\n\n  if (useWebswitch) {\n    if (!webswitchConnection || !webswitchConnection.connected) {\n      console.debug(\"calling\");\n      try {\n        // login\n        await httpClient({\n          hostname,\n          port: PORT,\n          path: \"/login\",\n          method: \"POST\",\n        });\n\n        webswitchConnection = await webswitchConnect(\n          new websocket.client(),\n          `ws://${hostname}:${PORT}${PATH}`,\n          observer\n        );\n\n        webswitchConnection.on(\"message\", function (message) {\n          console.debug(\"received message from\", url);\n\n          console.debug(\"@@@@@@@@@@@@@@@@@@@@@@@\", message);\n\n          if (message.type === \"utf8\") {\n            const event = JSON.parse(message);\n            console.log(\"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\", event);\n\n            observer.notify(event.eventName, {\n              message,\n              address: connection.remoteAddress,\n            });\n          }\n        });\n\n        webswitchConnection.on(\"error\", function (error) {\n          console.warn(webswitchConnect.name, error.message);\n          reject(error);\n        });\n        webswitchConnection.sendUTF(serializedEvent);\n      } catch (e) {\n        console.warn(publishEvent.name, e.message);\n        return;\n      }\n    }\n  } else {\n    httpClient({\n      hostname,\n      port,\n      path,\n      method: \"POST\",\n      payload: serialziedEvent,\n    });\n  }\n}\n"],"sourceRoot":""}