{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","getHostName","dns","console","warn","httpClient","hostname","port","path","method","payload","Promise","resolve","reject","contentLength","includes","Buffer","byteLength","options","headers","req","http","res","setEncoding","on","chunk","log","e","write","end","webswitchConnect","client","url","observer","debug","connection","remoteAddress","message","type","event","JSON","parse","notify","eventName","address","error","connect","publishEvent","useWebswitch","serializedEvent","stringify","webswitchConnection","connected","websocket","sendUTF","serialziedEvent"],"mappings":"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","file":"src_services_webswitch_js.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\";\n\nimport http from \"http\";\nimport websocket from \"websocket\";\nimport dns from \"dns/promises\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.dev\";\nconst PORT = 8060;\nconst PATH = \"/api/publish\";\n\nasync function getHostName() {\n  try {\n    return (await dns.lookup(FQDN)) ? FQDN : \"localhost\";\n  } catch (error) {\n    console.warn(\"dns lookup\", error);\n  }\n  return \"localhost\";\n}\n\nasync function httpClient({ hostname, port, path, method, payload = \"\" }) {\n  return new Promise(function (resolve, reject) {\n    const contentLength = [\"POST\", \"PATCH\"].includes(method)\n      ? Buffer.byteLength(payload)\n      : 0;\n\n    const options = {\n      hostname,\n      port,\n      path,\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": contentLength,\n      },\n    };\n\n    const req = http.request(options, res => {\n      res.setEncoding(\"utf8\");\n      res.on(\"data\", chunk => {\n        console.log(chunk);\n      });\n      res.on(\"end\", () => {});\n    });\n\n    req.on(\"error\", e => {\n      reject(e);\n    });\n\n    // Write data to request body\n    if (contentLength > 0) req.write(payload);\n    req.end();\n\n    req.on(\"finish\", resolve);\n  });\n}\n\n/**\n * Connect to Webswitch server.\n * @returns {Promise<websocket.connection>}\n */\nasync function webswitchConnect(client, url, observer) {\n  return new Promise(function (resolve, reject) {\n    console.debug(\"connecting to...\", url);\n\n    client.on(\"connect\", function (connection) {\n      console.debug(\"...connected to\", url, connection.remoteAddress);\n\n      connection.on(\"message\", function (message) {\n        console.debug(\"received message from\", url);\n\n        if (message.type === \"utf8\") {\n          const event = JSON.parse(message);\n\n          observer.notify(event.eventName, {\n            message,\n            address: connection.remoteAddress,\n          });\n        }\n      });\n\n      resolve(connection);\n    });\n\n    client.on(\"connectFailed\", function (error) {\n      reject(error);\n    });\n\n    client.connect(url);\n  });\n}\n\nexport async function publishEvent(event, observer, useWebswitch = true) {\n  if (!event) return;\n\n  const hostname = await getHostName();\n  const serializedEvent = JSON.stringify(event);\n  let webswitchConnection;\n\n  if (useWebswitch) {\n    if (!(webswitchConnection && webswitchConnection.connected)) {\n      await httpClient({ hostname, PORT, path: \"/login\", method: \"GET\" });\n\n      webswitchConnection = await webswitchConnect(\n        new websocket.client(),\n        `ws://${hostname}:${PORT}${PATH}`,\n        observer\n      );\n    }\n    webswitchConnection.sendUTF(serializedEvent);\n  } else {\n    httpClient({\n      hostname,\n      port,\n      path,\n      method: \"POST\",\n      payload: serialziedEvent,\n    });\n  }\n}\n"],"sourceRoot":""}