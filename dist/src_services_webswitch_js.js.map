{"version":3,"sources":["webpack://microlib-example/./src/services/webswitch.js"],"names":["FQDN","process","env","WEBSWITCH_HOST","PORT","PATH","getHostName","dns","console","warn","webswitchConnect","client","url","observer","Promise","resolve","reject","debug","on","connection","remoteAddress","message","type","event","JSON","parse","notify","eventName","address","error","connect","publishEvent","useWebswitch","host","serializedEvent","stringify","websocketConnnection","webswitchConnection","connected","websocket","sendUTF","options","hostname","port","path","method","headers","Buffer","byteLength","req","http","res","setEncoding","chunk","log","e","write","end"],"mappings":"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","file":"src_services_webswitch_js.js","sourcesContent":["/**\n * WEBSWITCH (c)\n * websocket clients connect to a common server,\n * which broadcasts any messages it receives.\n */\n\"use strict\"\n\nimport http from \"http\";\nimport websocket from \"websocket\";\nimport dns from \"dns/promises\";\n\nconst FQDN = process.env.WEBSWITCH_HOST || \"webswitch.aegis.com\";\nconst PORT = 8060;\nconst PATH = \"/api/publish\";\n\nasync function getHostName() {\n  try {\n    return (await dns.lookup(FQDN)) ? FQDN : \"localhost\";\n  } catch (error) {\n    console.warn(\"dns lookup\", error);\n  }\n  return \"localhost\";\n}\n\n/**\n * Connect to Webswitch server.\n * @returns {Promise<websocket.connection>}\n */\nasync function webswitchConnect(client, url, observer) {\n  return new Promise(function (resolve, reject) {\n    console.debug(\"connecting to...\", url);\n\n    client.on(\"connect\", function (connection) {\n      console.debug(\"connected to\", url, connection.remoteAddress);\n\n      connection.on(\"message\", function (message) {\n        console.debug(\"received message from\", url);\n\n        if (message.type === \"utf8\") {\n          const event = JSON.parse(message);\n\n          observer.notify(event.eventName, {\n            message,\n            address: connection.remoteAddress,\n          });\n        }\n      });\n\n      resolve(connection);\n    });\n\n    client.on(\"connectFailed\", function (error) {\n      reject(error);\n    });\n\n    client.connect(url);\n  });\n}\n\nexport async function publishEvent(event, observer, useWebswitch = true) {\n  if (!event) return;\n\n  const host = await getHostName();\n  const serializedEvent = JSON.stringify(event);\n  let webswitchConnection;\n\n  if (useWebswitch) {\n    if (!websocketConnnection || !webswitchConnection.connected) {\n      webswitchConnection = await webswitchConnect(\n        new websocket.client(),\n        `ws://${host}:${PORT}${PATH}`,\n        observer\n      );\n    }\n    webswitchConnection.sendUTF(serializedEvent);\n  } else {\n    const options = {\n      hostname: host,\n      port: 8060,\n      path: PATH,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(serializedEvent),\n      },\n    };\n\n    const req = http.request(options, res => {\n      res.setEncoding(\"utf8\");\n      res.on(\"data\", chunk => {\n        console.log(chunk);\n      });\n      res.on(\"end\", () => {});\n    });\n\n    req.on(\"error\", e => {\n      // console.error(`problem with request: ${e.message}`);\n    });\n\n    // Write data to request body\n    req.write(serializedEvent);\n    req.end();\n  }\n}\n"],"sourceRoot":""}